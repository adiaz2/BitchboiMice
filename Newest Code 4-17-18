//#include <iostream>
//#include "Mouse.h"
//#include "movingFunctions.h"
#include <Wire.h>
#include <SPI.h>
#include <math.h>
#include <Adafruit_LSM9DS1.h>
#include <Adafruit_Sensor.h>  // not used in this demo but required!
#include <digitalWriteFast.h>
using namespace std;
//Constants
int mazeSize = 8;
int GOAL_X = 7;
int GOAL_Y = 0;


int Y = 7; // row
int X = 0; // column


int currentDirection = 2;
int south = 0;
int west  = 1;
int north = 2;
int east  = 3;

bool openPath = false;

/*
   0 1 2 3 4 5 6 7
   _ _ _ _ _ _ _ _
0 | | |  _|_ _ _ _| 0
1 | | | |   |_ _  | 1
2 | | |_ _   _ _| | 2
3 | |        _ _ _| 3
4 | |       |_ _ _| 4
5 |     |  _   _  | 5
6 | |     |_| |_| | 6
7 |_|_ _ _ _ _ _ _| 7
   0 1 2 3 4 5 6 7
*/
// int hWalls[9][8] = {
// //0  1  2  3  4  5  6  7
// {-1,-1,-1,-1,-1,-1,-1,-1}, //[0]
// { 0,-1,-1,-1, 0, 0,-1, 0}, //[1]
// { 0,-1, 0,-1,-1,-1,-1, 0}, //[2]
// {-1,-1,-1, 0, 0,-1,-1, 0}, //[3]
// {-1,-1, 0,-1, 0,-1,-1,-1}, //[4]
// { 0,-1, 0, 0,-1,-1, 0,-1}, //[5]
// { 0, 0,-1, 0, 0,-1, 0, 0}, //[6]
// { 0,-1,-1, 0,-1,-1,-1, 0}, //[7]
// {-1,-1,-1,-1,-1,-1,-1,-1}, //[8]
// //0  1  2  3  4  5  6  7
// };

// int vWalls[8][9] = {
// //0  1  2  3  4  5  6  7  8
// {-1, 0, 0, 0, 0,-1, 0,-1,-1}, //[0]
// {-1, 0,-1, 0,-1, 0, 0, 0,-1}, //[1]
// {-1, 0, 0, 0, 0, 0, 0,-1,-1}, //[2]
// {-1, 0, 0,-1,-1,-1, 0, 0,-1}, //[3]
// {-1, 0, 0,-1, 0, 0,-1, 0,-1}, //[4]
// {-1,-1, 0,-1, 0, 0,-1, 0,-1}, //[5]
// {-1,-1, 0,-1,-1, 0,-1,-1,-1}, //[6]
// {-1, 0, 0, 0, 0, 0, 0, 0,-1}, //[7]
// //0  1  2  3  4  5  6  7  8
// };

int hMaze[9][8] = {
//0  1  2  3  4  5  6  7
{-1,-1,-1,-1,-1,-1,-1,-1}, //[0]
{ 0, 0, 0, 0, 0, 0, 0, 0}, //[1]
{ 0, 0, 0, 0, 0, 0, 0, 0}, //[2]
{ 0, 0, 0, 0, 0, 0, 0, 0}, //[3]
{ 0, 0, 0, 0, 0, 0, 0, 0}, //[4]
{ 0, 0, 0, 0, 0, 0, 0, 0}, //[5]
{ 0, 0, 0, 0, 0, 0, 0, 0}, //[6]
{ 0, 0, 0, 0, 0, 0, 0, 0}, //[7]
{-1,-1,-1,-1,-1,-1,-1,-1}, //[8]
//0  1  2  3  4  5  6  7
};

int vMaze[8][9] = {
//0  1  2  3  4  5  6  7  8
{-1, 0, 0, 0, 0, 0, 0, 0,-1}, //[0]
{-1, 0, 0, 0, 0, 0, 0, 0,-1}, //[1]
{-1, 0, 0, 0, 0, 0, 0, 0,-1}, //[2]
{-1, 0, 0, 0, 0, 0, 0, 0,-1}, //[3]
{-1, 0, 0, 0, 0, 0, 0, 0,-1}, //[4]
{-1, 0, 0, 0, 0, 0, 0, 0,-1}, //[5]
{-1, 0, 0, 0, 0, 0, 0, 0,-1}, //[6]
{-1, 0, 0, 0, 0, 0, 0, 0,-1}, //[7]
//0  1  2  3  4  5  6  7  8
};

int maze[8][8] = {
//0  1  2  3  4  5  6  7
{ 0, 0, 0, 0, 0, 0, 0, 0}, //[0]
{ 0, 0, 0, 0, 0, 0, 0, 0}, //[1]
{ 0, 0, 0, 0, 0, 0, 0, 0}, //[2]
{ 0, 0, 0, 0, 0, 0, 0, 0}, //[3]
{ 0, 0, 0, 0, 0, 0, 0, 0}, //[4]
{ 0, 0, 0, 0, 0, 0, 0, 0}, //[5]
{ 0, 0, 0, 0, 0, 0, 0, 0}, //[6]
{ 2, 0, 0, 0, 0, 0, 0, 0}, //[7]
//0  1  2  3  4  5  6  7
};

  int D1=6;     //H Bridge Outputs
  int D2=7;
  int D3=8;
  int D4=12;

  //Motor
  int LEnable=9;  //Digital pin 9
  int REnable=10; //Digital pin 10

  //IR
  int IR1;      //IR 1
  int IR2;      //IR 3
  int IR3;      //IR 5
  
  int THF=750;  //Threshold
  int THL=750;
  int THR=750;
  
  

  //Encoders
  int LEA=2;     //Left Encoder A
  int LEB=4;     //Left Encoder B
  int REA=3;     //Right Encode A
  int REB=5;     //Right Encode B
  int VPL= 0;    //Virtual Position Left
  int VPR= 0;    //Virtual Postion Right
  int VPMin = 38;
  int VPMax = 43;
  int Master= 120;
  int Slave= 120;
 
  int error=0;
  int kp=1;

void moveForward(){
  FW();
  while((VPL < 145 || VPR < 145) && !frontWall()){
    error= VPL-VPR;
  Slave += error/kp;
  if (Slave>140)
  {
    Slave=140;
  }
  if (Slave<25)
  {
    Slave=25;
  }
 analogWrite(LEnable, Master);
 analogWrite(REnable, Slave);
 
    delay(10);
  }
  VPL=0;
  VPR=0;

  STP();
}

void lTrn()
{
  STP();
  Master = 120;
  Slave = 120;
  analogWrite(LEnable, Master);
  analogWrite(REnable, Slave);
  boolean rightWheel = false;
  boolean leftWheel = false;
  
   while(rightWheel == false || leftWheel == false){    

    if ((VPR > VPMin) && (VPR < VPMax))
    {
      RSTP();
      rightWheel = true;
    }
    else if(VPR<VPMin)
    {
      RCW();
    }

    else if(VPR > VPMax)
    {
     RCCW(); 
    }
    
    
    if(VPL < -1*VPMin && VPL > -1*VPMax)
    {
      LSTP();
      leftWheel = true;
    }
    else if(VPL>-1*VPMin)
    {
      
      LCCW();
    }
    else if (VPL < -1*VPMax)
    {
      LCW();
    }
    
  }
  delay(500);

  while(rightWheel == false || leftWheel == false){    

    if ((VPR > VPMin) && (VPR < VPMax))
    {
      RSTP();
      rightWheel = true;
    }
    else if(VPR<VPMin)
    {
      RCW();
    }

    else if(VPR > VPMax)
    {
     RCCW(); 
    }
    
    
    if(VPL < -1*VPMin && VPL > -1*VPMax)
    {
      LSTP();
      leftWheel = true;
    }
    else if(VPL>-1*VPMin)
    {
      LCCW();
    }
    else if (VPL < -1*VPMax)
    {
      LCW();
    }
    
  }
  VPR = 0;
  VPL = 0;
  STP();
  return;
 
}
void rTrn()
{
  Master = 120;
  Slave = 120;
  analogWrite(LEnable, Master);
  analogWrite(REnable, Slave);
  boolean rightWheel = false;
  boolean leftWheel = false;
  VPR = 0;
  VPL = 0;

  
   while(rightWheel == false || leftWheel == false){
    //Serial.println(VPL);
    //Serial.println(VPR);
    
    if ((VPL > VPMin) && (VPL < VPMax))
    {
      LSTP();
      leftWheel = true;
    }
    else if(VPL<VPMin)
    {
      LCW();
      leftWheel = false;
    }

    else if(VPL > VPMax)
    {
     LCCW();
     leftWheel = false; 
    }
    
    
    if(VPR < -1*VPMin && VPR > -1*VPMax)
    {
      RSTP();
      rightWheel = true;
    }
    else if(VPR>-1*VPMin)
    {
      RCCW();
      rightWheel = false;
    }
    else if (VPR < -1*VPMax)
    {
      RCW();
      rightWheel = false;
    }
    
  }
  VPR = 0;
  VPL = 0;
  STP();
  return;
 
}

//IR Functions

bool IRC(int x)         //Function to Check if Somthing is Close to IR
{
  if (x==1)
  {
    IR1= analogRead(0);
    if (IR1<THL)
      return true;
    else
      return false;
  }
  if (x==2)
  {
    IR2= analogRead(2);
    if (IR2<THF)
      return true;
    else
      return false;
  }
  if (x==3)
  {
    IR3= analogRead(7);
    if (IR3<THR)
      return true;
    else
      return false;
  }
}





//Other Functions

  void isl()                                        //Left Encoder
  {
    if (digitalReadFast(LEB)== HIGH)
    {
      VPL++;
    }
    else
    {
      VPL--;
    }

    
   }

  void isr()                                        //Left Encoder
  {
    if (digitalReadFast(REB)== LOW)
    {
      VPR++;
    }
    else
    {
      VPR--;
    }
   }

   

  void FW() //Foward
  {
    LCW();
    RCW();
    
  }
  void BW() //Backwards
  {
    LCCW();
    RCCW();
  }
  void STP() //Stop
  {
    LSTP();
    RSTP();
  }

  //Wheel Functions

  //Left Functions 
  void LCW()               //Left Clock Wise
  {
    digitalWrite(D1, LOW);
    digitalWrite(D2, HIGH);
  }
  void LCCW()              //Left Counter Clock Wise
  {
    digitalWrite(D1, HIGH);
    digitalWrite(D2, LOW);
  }
  void LSTP()              //Left Stop
  {
    digitalWrite(D1, LOW);
    digitalWrite(D2, LOW);
  }


  //Right Functions
  void RCW()              //Right Clock Wise
  {
    digitalWrite(D3, HIGH);
    digitalWrite(D4, LOW);
  }
  void RCCW()             //Right Counter Clock Wise
  {
    digitalWrite(D3, LOW);
    digitalWrite(D4, HIGH);
  }
  void RSTP()             //Right Stop
  {
    digitalWrite(D3, LOW);
    digitalWrite(D4, LOW);
  }
  
  void mouseSetup() {
  // put your setup code here, to run once:
  attachInterrupt(digitalPinToInterrupt(LEA), isl, RISING);  
  attachInterrupt(digitalPinToInterrupt(REA), isr, RISING);
  Serial.begin(9600);
  analogWrite(LEnable, Master);
  analogWrite(REnable, Slave);
  VPL=0;
  VPR=0;
    delay(5);
  
  analogWrite(LEnable, 220);
  analogWrite(REnable, 220);


Serial.begin(9600);

}



//Functions
bool leftWall(){
  int left = (currentDirection + 3)%4;
  if(left == south)
    return(hMaze[Y+1][X] == -1);

  if(left == west)
    return(vMaze[Y][X] == -1);

  if(left == north)
    return(hMaze[Y][X] == -1);

  if(left == east)
    return(vMaze[Y][X+1] == -1);

  return false;
}

bool frontWall(){
  if(currentDirection == south)
    return(hMaze[Y+1][X] == -1);

  if(currentDirection == west)
    return(vMaze[Y][X] == -1);

  if(currentDirection == north)
    return(hMaze[Y][X] == -1);

  if(currentDirection == east)
    return(vMaze[Y][X+1] == -1);

  return false;
}

bool rightWall(){
  int right = (currentDirection + 1)%4;
  if(right == south)
    return(hMaze[Y+1][X] == -1);

  if(right == west)
    return(vMaze[Y][X] == -1);

  if(right == north)
    return(hMaze[Y][X] == -1);

  if(right == east)
    return(vMaze[Y][X+1] == -1);

  return false;
}

void turnLeft(){
  lTrn();
  currentDirection = (currentDirection + 3)%4;
}

void turnRight(){
  rTrn();
  currentDirection = (currentDirection + 1)%4;
}

void turn180(){
  turnRight();
  turnRight();
}

//finds any adjacent walls detectable by the IR sensors and marks them as walls
void readSurroundings(){
  if(currentDirection == west){
    //check what's west and record it
    if(IRC(2)){
      vMaze[Y][X] = -1; //west
    }
    else{
      vMaze[Y][X] = 1;//west
    }
    //check what's south and record it
    if(IRC(1)){
      hMaze[Y+1][X] = -1;
    }
    else{
      hMaze[Y+1][X] = 1;
    }
    //Check what's north and record it
    if(IRC(3)){
      hMaze[Y][X] = -1;
    }
    else{
      hMaze[Y][X] = 1;
    }
  }
  else if(currentDirection == east){
    //check what's east and record it
    if(IRC(2)){
      vMaze[Y][X+1] = -1;
    }
    else{
      vMaze[Y][X+1] = 1;
    }
    //check what's north and record it
    if(IRC(1)){
      hMaze[Y][X] = -1;
    }
    else{
      hMaze[Y][X] = 1;
    }
    //Check what's south and record it
    if(IRC(3)){
      hMaze[Y+1][X] = -1;
    }
    else{
      hMaze[Y+1][X] = 1;
    }
  }
  else if(currentDirection == south){
    //check what's south and record it
    if(IRC(2)){
      hMaze[Y+1][X] = -1;
    }
    else{
      hMaze[Y+1][X] = 1;
    }
    //check what's east and record it
    if(IRC(1)){
      vMaze[Y][X+1] = -1;
    }
    else{
      vMaze[Y][X+1] = 1;
    }
    //Check what's west and record it
    if(IRC(3)){
      vMaze[Y][X] = -1; //west
    }
    else{
      vMaze[Y][X] = 1;//west
    }
  }
  else if(currentDirection == north){
    //check what's north and record it
    if(IRC(2)){
      hMaze[Y][X] = -1;
    }
    else{
      hMaze[Y][X] = 1;
    }
    //check what's east and record it
    if(IRC(1)){
      vMaze[Y][X] = -1;
    }
    else{
      vMaze[Y][X] = 1;
    }
    //Check what's west and record it
    if(IRC(3)){
      vMaze[Y][X+1] = -1; //west
    }
    else{
      vMaze[Y][X+1] = 1;//west
    }
  }

}

void nextUnit(){
  moveForward();
  if(currentDirection == west){
    Serial.println("West");
    X--;
  }
  else if(currentDirection == east){
    Serial.println("East");
    X++;
  }
  else if(currentDirection == south){
    Serial.println("South");
    Y++;
  }
  else if(currentDirection == north){
    Serial.println("North");
    Y--;
  }
  if(maze[Y][X] >= 2){
    maze[Y][X]++;
  }
  else{
    maze[Y][X] = 2;
  }
  //readSurroundings();
}


void newTile(){
  readSurroundings();

  //if you are at the end
  if(X == GOAL_X && Y == GOAL_Y){
    return;
  }
  //first check if you can keep going forward
  if(currentDirection == east){
    if(!leftWall() && (maze[Y-1][X]<maze[Y][X+1] || frontWall())){
      turnLeft();
      nextUnit();
      return;
    }
    if(!frontWall()){
      nextUnit();
      return;
    }
    if(!leftWall() && maze[Y-1][X] < 2){ //if you can go north instead of east, do it
      turnLeft();
      nextUnit();
      return;
    }
    //you cannot go east or north, so check if there is a path that will take you north behind you
    for(int i = Y; i<mazeSize && vMaze[Y][X-i] != -1; i++){
      if(hMaze[Y][X] == 1){
        openPath = true;
        turn180();
        nextUnit();
        return;
      }
    }
    if(!rightWall()){
      turnRight();
      nextUnit();
      return;
    }
    if(!leftWall()){ //if you can go north instead of east, do it
      turnLeft();
      nextUnit();
      return;
    }
    else{
      turn180();
      nextUnit();
      return;
    }

  }
  if(currentDirection == north){
    if(!rightWall() && (maze[Y][X+1]<maze[Y-1][X] || frontWall())){
      turnRight();
      nextUnit();
      return;
    }
    if(!frontWall()){
      nextUnit();
      return;
    }
    if(!rightWall() && maze[Y][X+1] < 2){ //if you can go east instead of north, do it
      turnRight();
      nextUnit();
      return;
    }

    //you cannot go east or north, so check if there is a path that will take you north behind you
    for(int i = 0; i<mazeSize && hMaze[Y+i+1][X] != -1; i++){
      if(vMaze[Y][X+i+1] == 1){
        openPath = true;
        turn180();
        nextUnit();
        return;
      }
    }

    if(!leftWall()){
      turnLeft();
      nextUnit();
      return;
    }
    if(!rightWall()){ //if you can go east instead of north, do it
      turnRight();
      nextUnit();
      return;
    }
    else{
      turn180();
      nextUnit();
      return;
    }
  }

  //if you are facing west,
  if(currentDirection == west){
    //try to go north
    if(!rightWall() && maze[Y-1][X] < 2){
      turnRight();
      nextUnit();
      openPath = false;
      return;
    }
    //if you know there is an open path ahead or there is a wall south, move west
    if((openPath || leftWall()) && !frontWall()){
      nextUnit();
      return;
    }
    
    else if(!frontWall() && maze[Y][X-1] < 2){
      nextUnit();
      return;
    }

    //if there is no wall south and no open path further west
    else if(!leftWall() && maze[Y+1][X] < 2){
      turnLeft();
      nextUnit();
      openPath = false;
      return;
    }
    else if(!leftWall()){
      turnLeft();
      nextUnit();
      openPath = false;
      return;
    }
    if(!rightWall()){
      turnRight();
      nextUnit();
      return;
    }
    else{
      turn180();
      if(!frontWall()){
        nextUnit();
        openPath = false;
      }
      return;
    }


  }

  if(currentDirection == south){
    //try to go east
    if(!leftWall() && maze[Y][X+1] < 2){
      turnLeft();
      nextUnit();
      openPath = false;
      return;
    }
    //if you know there is an open path ahead or there is a wall west, move south
    if((openPath || rightWall()) && !frontWall()){
      nextUnit();
      return;
    }
    else if(!frontWall() && maze[Y+1][X] < 2){
      nextUnit();
      return;
    }
    //if there is no wall west and no open path further south
    else if(!rightWall() && maze[Y+1][X] < 2){
      turnRight();
      nextUnit();
      openPath = false;
      return;
    }
    
    else if(!rightWall()){
      turnRight();
      nextUnit();
      openPath = false;
      return;
    }
    else if(!leftWall()){
      turnLeft();
      nextUnit();
      openPath = false;
      return;
    }
    else{
      turn180();
      if(!frontWall()){
        nextUnit();
        openPath = false;
      }
      return;
    }

  }
}
void setup(){
  int i = 0;
  mouseSetup();
//  delay(1000);
  //while(i<60){
  while(!(X == GOAL_X && Y == GOAL_Y)){
    newTile();
    delay(500);
    //printf("%d %d\n%d moves\n", X,Y,i);
    //i++;
  }
//  printf("%d moves used\n", i);
//  printf("Memorized maze:\n");
//  for(int j = 0; j<mazeSize; j++){
//    printf(" _");
//  }
//  for(int m = 0; m<mazeSize; m++){
//    printf("\n");
//    for(int n=0; n<mazeSize+1; n++){
//      if(vMaze[m][n] == -1){
//        printf("|");
//      }
//      else{
//        printf(" ");
//      }
//      if(hMaze[m+1][n] == -1 && n != mazeSize){
//        printf("_");
//      }
//      else{
//        printf(" ");
//      }
//
//    }
//  }
//  printf("\n");
//
//  for(int m = 0; m<mazeSize; m++){
//    printf("\n");
//    for(int n=0; n<mazeSize+1; n++){
//      printf("%d ", maze[m][n]);
//    }
//  }
//  printf("\n\n");
}
void loop(){}

